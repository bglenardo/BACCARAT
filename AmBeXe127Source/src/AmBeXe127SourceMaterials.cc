////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define AmBeXe127Source materials
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//	GEANT4 includes
//
#include "G4Isotope.hh"
#include "G4Element.hh"
#include "G4Material.hh"
#include "G4OpticalSurface.hh"
#include "G4VisAttributes.hh"
#include "G4Color.hh"
#include "G4SystemOfUnits.hh"

//
//	Project-specific includes
//
#include "AmBeXe127SourceMaterials.hh"

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					AmBeXe127SourceMaterials()
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe127SourceMaterials *AmBeXe127SourceMaterials::AmBeXe127Sourcematerials = 0;
AmBeXe127SourceMaterials::AmBeXe127SourceMaterials()
{
  if(AmBeXe127Sourcematerials){
    G4cerr<<"AmBeXe127SourceMaterials is a singleton:: an instance already exists!"<<G4endl;
    //    delete AmBeXe127Sourcematerials;
    exit(1);
  }  
  CreateMaterials();
  CreateOpticalSurfaces();
  CreateVisualAttributes();
  
  AmBeXe127Sourcematerials = this;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					~AmBeXe127SourceMaterials()
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe127SourceMaterials::~AmBeXe127SourceMaterials()
{

  //delete all materials
  if(materials.size()>0){
    for (material_map::iterator it=materials.begin(); it!=materials.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size

  //delete all material properties
  //   if(properties.size()>0){
  //     for (property_map::iterator it=properties.begin(); it!=properties.end(); it++){
  //       if(it->second){
  // 	delete it->second;
  // 	it->second = NULL;
  //       }//end if second
  //     }//end for
  //   }//end if size

  //delete all visattributes
  if(visattributes.size()>0){
    for (vis_map::iterator it=visattributes.begin(); it!=visattributes.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size

  //delete all opticals
  if(opticals.size()>0){
    for (optical_map::iterator it=opticals.begin(); it!=opticals.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size
  
  AmBeXe127Sourcematerials = 0;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					GetInstance()
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe127SourceMaterials *AmBeXe127SourceMaterials::GetInstance()
{
  return AmBeXe127Sourcematerials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetMaterialByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4Material *AmBeXe127SourceMaterials::GetMaterialByName(G4String mat_name)
{
  for (material_map::iterator it=materials.begin(); it!=materials.end(); it++){
    if(it->first == mat_name) return it->second;
  }//end for
  return NULL;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetVisAttributesByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4VisAttributes *AmBeXe127SourceMaterials::GetVisAttributesByName(G4String mat_name)
{
  for (vis_map::iterator it=visattributes.begin(); it!=visattributes.end(); it++){
    if(it->first == mat_name) return it->second;
  }//end for
  return NULL;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetPropertiesTableByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
// G4MaterialPropertiesTable *AmBeXe127SourceMaterials::GetPropertiesTableByName(G4String mat_name)
// {
//   for (property_map::iterator it=properties.begin(); it!=properties.end(); it++){
//     if(it->first == mat_name) return it->second;
//   }//end for
//   return NULL;
// }

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetOpticalSurfaceByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4OpticalSurface *AmBeXe127SourceMaterials::GetOpticalSurfaceByName(G4String optical_name)
{
  for (optical_map::iterator it=opticals.begin(); it!=opticals.end(); it++){
    if(it->first == optical_name) return it->second;
  }//end for
  return NULL;
}


void AmBeXe127SourceMaterials::CreateMaterials()
{
  //
  //	Isotopes
  //	Atomic weights come from webelements.com
  //
  
  G4Isotope *Xe124 = new G4Isotope( "Xe124", 54, 124, 123.9058942 *g/mole );
  G4Isotope *Xe126 = new G4Isotope( "Xe126", 54, 126, 125.904281 *g/mole );
  G4Isotope *Xe128 = new G4Isotope( "Xe128", 54, 128, 127.9035312 *g/mole );
  G4Isotope *Xe129 = new G4Isotope( "Xe129", 54, 129, 128.9047801 *g/mole );
  G4Isotope *Xe130 = new G4Isotope( "Xe130", 54, 130, 129.9035094 *g/mole );
  G4Isotope *Xe131 = new G4Isotope( "Xe131", 54, 131, 130.905072 *g/mole );
  G4Isotope *Xe132 = new G4Isotope( "Xe132", 54, 132, 131.904144 *g/mole );
  G4Isotope *Xe134 = new G4Isotope( "Xe134", 54, 134, 133.905395 *g/mole );
  G4Isotope *Xe136 = new G4Isotope( "Xe136", 54, 136, 135.907214 *g/mole );
  
  //
  //	Elements
  //
	
  G4Element *natXe = new G4Element( "Natural Xe", "natXe", 9 );
  natXe->AddIsotope( Xe124, 0.09*perCent );
  natXe->AddIsotope( Xe126, 0.09*perCent );
  natXe->AddIsotope( Xe128, 1.92*perCent );
  natXe->AddIsotope( Xe129, 26.44*perCent );
  natXe->AddIsotope( Xe130, 4.08*perCent );
  natXe->AddIsotope( Xe131, 21.18*perCent );
  natXe->AddIsotope( Xe132, 26.89*perCent );
  natXe->AddIsotope( Xe134, 10.44*perCent );
  natXe->AddIsotope( Xe136, 8.87*perCent );
	
  //
  //	Materials
  //
  
  hpGasXe = new G4Material( "hpGasXe", 0.793*g/cm3, 1, kStateGas,
					  295*kelvin, 148.4*bar );
  hpGasXe->AddElement( natXe, 1 );
  //mat_ = GetMaterialByName("hpGasXe");
  //if(mat_) delete mat_;
  //materials ["hpGasXe"] = hpGasXe;
  
}


//------++++++------++++++------++++++------++++++------++++++------++++++------
//					CreateOpticalSurfaces()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe127SourceMaterials::CreateOpticalSurfaces()
{
	
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					CreateVisualAttributes()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe127SourceMaterials::CreateVisualAttributes()
{}

