////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define AmBeXe127Source geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
//#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "AmBeXe127SourceDetector.hh"
#include "AmBeXe127SourceMaterials.hh"
#include "AmBeXe127SourceMessenger.hh"

//
//		Definitions
//

using namespace AmBeXe127SourceDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe127SourceDetector::AmBeXe127SourceDetector( G4String detName,
			G4String outVolName )
{
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  AmBeXe127Sourcemessenger = new AmBeXe127SourceMessenger( this );
  
  //***DO NOT*** create another instance of AmBeXe127SourceMaterials anywhere else!
  //Just refer to it using AmBeXe127SourceMaterials::GetInstance().
  AmBeXe127Sourcematerials = AmBeXe127SourceMaterials::GetInstance();
  if(!AmBeXe127Sourcematerials) AmBeXe127Sourcematerials = new AmBeXe127SourceMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe127SourceDetector::~AmBeXe127SourceDetector()
{
  if(AmBeXe127Sourcemessenger) delete AmBeXe127Sourcemessenger;
  if(AmBeXe127Sourcematerials) delete AmBeXe127Sourcematerials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe127SourceDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe127SourceDetector::BuildDetector(){
  InitializeDetector();

  //this is how you access your material definition
  //G4cout<<"AmBeXe127SourceMaterials example"<<G4endl;
 // G4cout<<AmBeXe127Sourcematerials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
  //G4cout<<"NistMaterials example"<<G4endl;
  //G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
  //G4cout<<"BaccMaterials example"<<G4endl;
  //G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * lab_space = new G4Box("lab_space", 4.*m,4.*m,4.*m);
  logicalVolume  = new G4LogicalVolume(lab_space, BACCmaterials->Air(), "lab_space_log");
  logicalVolume->SetVisAttributes( BACCmaterials->AirVis() );

  G4Tubs * water_tank_tubs = new G4Tubs("water_tank_tubs",
                                   0.*cm,
                                   24.*2.54*cm,
                                   20.*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * water_tank_log = new G4LogicalVolume( water_tank_tubs, BACCmaterials->Water(), "water_tank_log");
  water_tank_log->SetVisAttributes( BACCmaterials->WaterVis() );
  BaccDetectorComponent * water_tank = new BaccDetectorComponent(0, 
                                   G4ThreeVector(0,0,0),
                                   water_tank_log,
                                   "water_tank",
                                   logicalVolume,
                                   0,0,true);

  G4Tubs * steel_cylinder_tubs = new G4Tubs("steel_cylinder_tubs",
                                   0.*cm,
                                   2.*2.54*cm,
                                   (57.94+2.4)/2.*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * steel_cylinder_log = new G4LogicalVolume( steel_cylinder_tubs, BACCmaterials->Steel(), "steel_cylinder_log");
  steel_cylinder_log->SetVisAttributes( BACCmaterials->TestPurpleVis() );  

  BaccDetectorComponent * steel_cylinder_1 = new BaccDetectorComponent(0,
                                   G4ThreeVector(4.*2.54*cm,0,0),
                                   steel_cylinder_log,
                                   "steel_cylinder_1",
                                   water_tank_log,
                                   0,0,true);
  
  BaccDetectorComponent * steel_cylinder_2 = new BaccDetectorComponent(0,
                                   G4ThreeVector(-4.*2.54*cm,0,0),
                                   steel_cylinder_log,
                                   "steel_cylinder_2",
                                   water_tank_log,
                                   0,0,true);
 

  G4Tubs * xe_gas_volume_tubs = new G4Tubs("xe_gas_volume_tubs",
                                   0,
                                   (2. - 0.206)*2.54*cm,
                                   57.94/2.*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * xe_gas_volume_log = new G4LogicalVolume( xe_gas_volume_tubs, 
                                                             AmBeXe127Sourcematerials->HPGasXe(),
                                                             "xe_gas_volume_log");
  xe_gas_volume_log->SetVisAttributes( BACCmaterials->TestGreenVis() );

  BaccDetectorComponent * xe_gas_volume_1 = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,0),
                                   xe_gas_volume_log,
                                   "xe_gas_volume_1",
                                   steel_cylinder_log,
                                   0,0,true);

  G4Box * vertical_al_support_rod_box = new G4Box("vertical_al_support_rod_box",
                                                  0.5*2.54*cm,
                                                  0.5*2.54*cm,
                                                  16.*2.54*cm);
  G4LogicalVolume * vertical_al_support_log = new G4LogicalVolume( vertical_al_support_rod_box,
                                                                   BACCmaterials->Aluminum(),
                                                                   "vertical_al_support_log");
  BaccDetectorComponent * vertical_al_support_1 = new BaccDetectorComponent(0,
                                   G4ThreeVector(6.*2.54*cm,-2.5*2.54*cm,-8.*2.54*cm),
                                   vertical_al_support_log,
                                   "vertical_al_support_1",
                                   water_tank_log,
                                   0,0,true);

  BaccDetectorComponent * vertical_al_support_2 = new BaccDetectorComponent(0,
                                   G4ThreeVector(-6.*2.54*cm,-2.5*2.54*cm,-8.*2.54*cm),
                                   vertical_al_support_log,
                                   "vertical_al_support_2",
                                   water_tank_log,
                                   0,0,true);

  G4Box * horizontal_al_support_box = new G4Box("horizontal_al_support_box",
                                                5.5*2.54*cm,
                                                0.5*2.54*cm,
                                                0.5*2.54*cm);
  G4LogicalVolume * horizontal_al_support_log = new G4LogicalVolume( horizontal_al_support_box,
                                                BACCmaterials->Aluminum(),
                                                "horizontal_al_support_log");
  BaccDetectorComponent * horizontal_al_support = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,-2.5*2.54*cm,7.5*2.54*cm),
                                   horizontal_al_support_log,
                                   "horizontal_al_support",
                                   water_tank_log,
                                   0,0,true);

  G4Tubs * pvc_source_tube_tubs = new G4Tubs("pvc_source_tube_tubs",
                                   0,                //1./2.*2.54*cm,
                                   1.3/2.*2.54*cm,
                                   21.25/2.*2.54*cm,
                                   0.*deg,360.*deg);

  G4Tubs * pvc_source_tube_cavity_tubs = new G4Tubs("pvc_source_tube_cavity_tubs",
                                   0,
                                   0.5*2.54*cm,
                                   21./2.*2.54*cm,
                                   0.*deg,360.*deg);
  G4SubtractionSolid * pvc_source_tube_sub = new G4SubtractionSolid("pvc_source_tube_sub",
                                                                    pvc_source_tube_tubs,
                                                                    pvc_source_tube_cavity_tubs,
                                                                    0,G4ThreeVector(0,0,0.25*2.54*cm));


  G4LogicalVolume * pvc_source_tube_log = new G4LogicalVolume( pvc_source_tube_tubs, BACCmaterials->PVC(), "pvc_source_tube_log");
  BaccDetectorComponent * pvc_source_tube = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,9.25*2.54*cm),
                                   pvc_source_tube_log,
                                   "pvc_source_tube",
                                   water_tank_log,
                                   0,0,true);

}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector AmBeXe127SourceDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}
