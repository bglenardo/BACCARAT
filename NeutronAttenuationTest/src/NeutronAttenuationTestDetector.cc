////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define NeutronAttenuationTest geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>
#include <iostream>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4RotationMatrix.hh"
//#include "G4Tubs.hh"
#include "G4Box.hh"
#include "G4Sphere.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
//#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
//#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "NeutronAttenuationTestDetector.hh"
#include "NeutronAttenuationTestMaterials.hh"
#include "NeutronAttenuationTestMessenger.hh"
//
//		Definitions
//

//using namespace NeutronAttenuationTestDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
NeutronAttenuationTestDetector::NeutronAttenuationTestDetector( G4String detName,
			G4String outVolName )
{

  cerr << "Inside NeutronAttenuationTestDetector constructor!!" << endl;
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  NeutronAttenuationTestmessenger = new NeutronAttenuationTestMessenger( this );
  
  //***DO NOT*** create another instance of NeutronAttenuationTestMaterials anywhere else!
  //Just refer to it using NeutronAttenuationTestMaterials::GetInstance().
  NeutronAttenuationTestmaterials = NeutronAttenuationTestMaterials::GetInstance();
  if(!NeutronAttenuationTestmaterials) NeutronAttenuationTestmaterials = new NeutronAttenuationTestMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
NeutronAttenuationTestDetector::~NeutronAttenuationTestDetector()
{
  if(NeutronAttenuationTestmessenger) delete NeutronAttenuationTestmessenger;
  if(NeutronAttenuationTestmaterials) delete NeutronAttenuationTestmaterials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void NeutronAttenuationTestDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void NeutronAttenuationTestDetector::BuildDetector(){

  cerr << "\nInside BuildDetector of NeutronAttenuationTestDetector...\n" << endl;

  InitializeDetector();

  //this is how you access your material definition
//  G4cout<<"NeutronAttenuationTestMaterials example"<<G4endl;
//  G4cout<<NeutronAttenuationTestmaterials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
//  G4cout<<"NistMaterials example"<<G4endl;
//  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
//  G4cout<<"BaccMaterials example"<<G4endl;
//  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * example_box = new G4Box("example_box", 5*m,5*m,5*m);
  logicalVolume  = new G4LogicalVolume(example_box, BACCmaterials->Vacuum(), "example_log");
  logicalVolume->SetVisAttributes( BACCmaterials->VacuumVis() );


  G4Box * lab_space_box = new G4Box("lab_space",4*m,4*m,4*m);
  G4LogicalVolume * lab_space_log = new G4LogicalVolume( lab_space_box, BACCmaterials->Vacuum(), "lab_space");
  lab_space_log->SetVisAttributes( BACCmaterials->VacuumVis() );
  BaccDetectorComponent* lab_space = new BaccDetectorComponent(0,
                                            G4ThreeVector(0,0,0),
                                            lab_space_log,
                                            "lab_space",
                                            logicalVolume,
                                            0,0,true);
                                            

  G4Box * shield_box = new G4Box( "shield_box",
                                            shieldingThickness,
                                            1.*m,
                                            1.*m);
  G4LogicalVolume * shield_log = new G4LogicalVolume( shield_box, NeutronAttenuationTestmaterials->BoratedPE_LD(), "shield_log" );
  //G4LogicalVolume * shield_log = new G4LogicalVolume( shield_box, BACCmaterials->Vacuum(), "shield_log" );
//  G4LogicalVolume * shield_log = new G4LogicalVolume( shield_box, BACCmaterials->Water(), "shield_log" );
  shield_log->SetVisAttributes( BACCmaterials->WaterVis() );
  BaccDetectorComponent* shield = new BaccDetectorComponent( 0,
                                            G4ThreeVector(0,0,0),
                                            shield_log,
                                            "shield",
                                            lab_space_log,
                                            0,0,true);

  G4Box * detector_box = new G4Box( "detector_box",
                                    0.1*cm,
                                    1.*m, 1.*m);
  G4LogicalVolume * detector_log = new G4LogicalVolume( detector_box, BACCmaterials->Vacuum(), "detector_log");
  detector_log->SetVisAttributes( BACCmaterials->TeflonVis() );
  BaccDetectorComponent *detector = new BaccDetectorComponent( 0,
                                           G4ThreeVector( shieldingThickness + 1.*cm, 0., 0.),
                                           detector_log,
                                           "detector",
                                           lab_space_log,
                                           0,0,true);


}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector NeutronAttenuationTestDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}


