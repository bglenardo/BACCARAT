////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define Xe127Radioassay materials
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

#ifndef Xe127RadioassayMaterials_HH
#define Xe127RadioassayMaterials_HH 1

//
//	c++ includes
//
#include <map>

//
//	Geant4 includes
//
#include "G4String.hh"

//
//	Class forwarding
//
class G4Material;
class G4VisAttributes;
//class G4MaterialPropertiesTable;
class G4OpticalSurface;

typedef std::map<G4String, G4Material*> material_map;
//typedef std::map<G4String, G4MaterialPropertiesTable*> property_map;
typedef std::map<G4String, G4VisAttributes*> vis_map;
typedef std::map<G4String, G4OpticalSurface*> optical_map;

//------++++++------++++++------++++++------++++++------++++++------++++++------
class Xe127RadioassayMaterials
{
public:
  Xe127RadioassayMaterials();
  ~Xe127RadioassayMaterials();
  
  static Xe127RadioassayMaterials *GetInstance();
  
  G4Material *GetMaterialByName(G4String);
  G4VisAttributes *GetVisAttributesByName(G4String);
  //  G4MaterialPropertiesTable *GetPropertiesTableByName(G4String);
  G4OpticalSurface *GetOpticalSurfaceByName(G4String);
  
private:
  
  static Xe127RadioassayMaterials *Xe127Radioassaymaterials;
  
  material_map materials;
  //  property_map properties;
  vis_map visattributes;
  optical_map opticals;
  
  void CreateMaterials();
  void CreateOpticalSurfaces();
  void CreateVisualAttributes();

};

#endif
