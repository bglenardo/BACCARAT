////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define XeNeu geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
//#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
#include "BaccPhysicsOpticalPhysics.hh"
#include "BaccExample8778PMT.hh"

//
//      Project includes
//
#include "XeNeuDetector.hh"
#include "XeNeuMaterials.hh"
#include "XeNeuMessenger.hh"
#include "XeNeuDetectorParameters.hh"
//
//		Definitions
//

using namespace XeNeuDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
XeNeuDetector::XeNeuDetector( G4String detName,
			G4String outVolName )
{
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  XeNeumessenger = new XeNeuMessenger( this );
  
  //***DO NOT*** create another instance of XeNeuMaterials anywhere else!
  //Just refer to it using XeNeuMaterials::GetInstance().
  XeNeumaterials = XeNeuMaterials::GetInstance();
  if(!XeNeumaterials) XeNeumaterials = new XeNeuMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
XeNeuDetector::~XeNeuDetector()
{
  if(XeNeumessenger) delete XeNeumessenger;
  if(XeNeumaterials) delete XeNeumaterials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void XeNeuDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void XeNeuDetector::BuildDetector(){
  InitializeDetector();

  //this is how you access your material definition
  G4cout<<"XeNeuMaterials example"<<G4endl;
  G4cout<<XeNeumaterials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
  G4cout<<"NistMaterials example"<<G4endl;
  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
  G4cout<<"BaccMaterials example"<<G4endl;
  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * laboratory = new G4Box("laboratory", 10. * m, 10. * m, 10. * m);
  logicalVolume  = new G4LogicalVolume(laboratory, BACCmaterials->Vacuum(), "laboratory");
  logicalVolume->SetVisAttributes( BACCmaterials->VacuumVis() );

  // Outer Detector Can
  G4Tubs * outer_can_tubs = new G4Tubs("outer_can",
                                          outerCanInnerRadius,
                                          outerCanOuterRadius,
                                          outerCanHalfHeight,
                                           0.*deg, 360.*deg);
  G4LogicalVolume * outer_can_log = new G4LogicalVolume(outer_can_tubs, BACCmaterials->Steel(), "outer_can");
  BaccDetectorComponent * outer_can = new BaccDetectorComponent(0,
                                                                 G4ThreeVector(0.,0.,0.64*2.54*cm),
                                                                 outer_can_log,
                                                                 "outer_can",
                                                                 logicalVolume,
                                                                 0,0,true);

  // vacuum insulation space
  G4Tubs * vacuum_space_tubs = new G4Tubs("vacuum_space",
                                          innerCanOuterRadius,
                                          outerCanInnerRadius,
                                          outerCanHalfHeight,
                                          0.*deg, 360.*deg);
  G4LogicalVolume * vacuum_space_log = new G4LogicalVolume(vacuum_space_tubs, BACCmaterials->Vacuum(),"vacuum_space");
  BaccDetectorComponent * vacuum_space = new BaccDetectorComponent(0,
                                                                 G4ThreeVector(0.,0.,0.64*2.54*cm),
                                                                 vacuum_space_log,
                                                                 "vacuum_space",
                                                                 logicalVolume,
                                                                 0,0,true);
//
  // Inner detector can
  G4Tubs * inner_can_tubs = new G4Tubs("inner_can",
                                          0*cm,
                                          innerCanOuterRadius,
                                          innerCanHalfHeight,
                                           0.*deg, 360.*deg);
  G4LogicalVolume * inner_can_log = new G4LogicalVolume(inner_can_tubs, BACCmaterials->Steel(), "inner_can");
  BaccDetectorComponent * inner_can = new BaccDetectorComponent(0,
                                                                 G4ThreeVector(0.,0.,0.64*2.54*cm),
                                                                 inner_can_log,
                                                                 "inner_can",
                                                                 logicalVolume,
                                                                 0,0,true);
  // Liquid xenon volume
  double xenon_vol_half_height = innerCanHalfHeight-1./8.*2.54*cm;

  G4Tubs * liquid_xenon_tubs = new G4Tubs("liquid_xenon",
                                            0*cm,
                                            innerCanInnerRadius,
                                            xenon_vol_half_height,
                                            0.*deg,360.*deg);
  G4LogicalVolume * liquid_xenon_log = new G4LogicalVolume(liquid_xenon_tubs, BACCmaterials->LiquidXe(),"liquid_xenon");
  BaccDetectorComponent * liquid_xenon = new BaccDetectorComponent(0,
                                                                 G4ThreeVector(0.,0.,0.),
                                                                 liquid_xenon_log,
                                                                 "liquid_xenon",
                                                                 inner_can_log,
                                                                 0,0,true);
  
  // Teflon piece - raw cylinder
  double teflonCentPos_Z = 0. - xenon_vol_half_height + teflonBlockHalfHeight;
  double teflonTopPos_Z = teflonCentPos_Z + teflonBlockHalfHeight;

  G4Tubs * teflon_block_tubs = new G4Tubs("teflon_block",
                                          teflonBlockInnerRadius,
                                          teflonBlockOuterRadius,
                                          teflonBlockHalfHeight,
                                          0.*deg,360.*deg);

  // Cathode ring
  double cathodeRingBotPos_Z = teflonTopPos_Z + 0.25*2.54*cm;
  
  G4Tubs * cathode_ring_tubs = new G4Tubs("cathode_ring",
                                         fieldRingInnerRadius,
                                         fieldRingOuterRadius,
                                         fieldGridHalfHeight,
                                         0.*deg,360.*deg);
  G4LogicalVolume * cathode_ring_log = new G4LogicalVolume(cathode_ring_tubs, BACCmaterials->Copper(),"cathode_ring");
  BaccDetectorComponent * cathode_ring = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,cathodeRingBotPos_Z+fieldGridHalfHeight),
                                                                   //G4ThreeVector(0.,0.,5.*cm),
                                                                   cathode_ring_log,
                                                                   "cathode_ring",
                                                                   liquid_xenon_log,
                                                                   0,0,true);


  // First field ring
  double fieldRingOffset_Z = 0.105*2.54*cm; 
  double fieldRing1Bot_Z = cathodeRingBotPos_Z + fieldGridHalfHeight*2. + fieldRingOffset_Z;
  
  G4Tubs * field_ring_1_tubs = new G4Tubs("field_ring_1",
                                         fieldRingInnerRadius,
                                         fieldRingOuterRadius,
                                         fieldRingHalfHeight,
                                         0.*deg,360.*deg);
  G4LogicalVolume * field_ring_1_log = new G4LogicalVolume(field_ring_1_tubs, BACCmaterials->Copper(),"field_ring_1");
  BaccDetectorComponent * field_ring_1 = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,fieldRing1Bot_Z + fieldRingHalfHeight),
                                                                   field_ring_1_log,
                                                                   "field_ring_1",
                                                                   liquid_xenon_log,
                                                                   0,0,true);

  // Second field ring
  double fieldRing2Bot_Z = fieldRing1Bot_Z + fieldRingHalfHeight*2. + fieldRingOffset_Z;
  
  G4Tubs * field_ring_2_tubs = new G4Tubs("field_ring_2",
                                         fieldRingInnerRadius,
                                         fieldRingOuterRadius,
                                         fieldRingHalfHeight,
                                         0.*deg,360.*deg);
  G4LogicalVolume * field_ring_2_log = new G4LogicalVolume(field_ring_2_tubs, BACCmaterials->Copper(),"field_ring_2");
  BaccDetectorComponent * field_ring_2 = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,fieldRing2Bot_Z + fieldRingHalfHeight),
                                                                   field_ring_2_log,
                                                                   "field_ring_2",
                                                                   liquid_xenon_log,
                                                                   0,0,true);
  
// Third field ring
  double fieldRing3Bot_Z = fieldRing2Bot_Z + fieldRingHalfHeight*2. + fieldRingOffset_Z;
  
  G4Tubs * field_ring_3_tubs = new G4Tubs("field_ring_3",
                                         fieldRingInnerRadius,
                                         fieldRingOuterRadius,
                                         fieldRingHalfHeight,
                                         0.*deg,360.*deg);
  G4LogicalVolume * field_ring_3_log = new G4LogicalVolume(field_ring_3_tubs, BACCmaterials->Copper(),"field_ring_3");
  BaccDetectorComponent * field_ring_3 = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,fieldRing3Bot_Z + fieldRingHalfHeight),
                                                                   field_ring_3_log,
                                                                   "field_ring_3",
                                                                   liquid_xenon_log,
                                                                   0,0,true);
  
// Extraction grid
  double extractionBotPos_Z = fieldRing3Bot_Z + fieldRingHalfHeight*2. + fieldRingOffset_Z;
  
  G4Tubs * extraction_grid_tubs = new G4Tubs("extraction_grid",
                                         fieldRingInnerRadius,
                                         fieldRingOuterRadius,
                                         fieldGridHalfHeight,
                                         0.*deg,360.*deg);
  G4LogicalVolume * extraction_grid_log = new G4LogicalVolume(extraction_grid_tubs, BACCmaterials->Copper(),"extraction_grid");
  BaccDetectorComponent * extraction_grid = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,extractionBotPos_Z + fieldGridHalfHeight),
                                                                   extraction_grid_log,
                                                                   "extraction_grid",
                                                                   liquid_xenon_log,
                                                                   0,0,true);
                                          
// Weir
  double weirPos_Z = extractionBotPos_Z + fieldGridHalfHeight*2. + 0.5*cm - weirHalfHeight;
  G4Tubs * weir_tubs = new G4Tubs("weir",
                                  weirInnerRadius,
                                  weirOuterRadius,
                                  weirHalfHeight,
                                  0.*deg - weirCutoutAngle/2., weirCutoutAngle); 
//                                  138.*deg,222.*deg);
//  G4LogicalVolume * weir_block_log = new G4LogicalVolume( weir_tubs, BACCmaterials->Peek(), "weir");

  G4Tubs * weir_hole_tubs = new G4Tubs("weir_hole",
                                       weirPocketInnerRadius,
                                       weirPocketOuterRadius,
                                       weirHalfHeight,// - 0.5*2.54*cm,
                                       0.*deg - weirPocketCutoutAngle/2., weirPocketCutoutAngle);
  G4LogicalVolume * weir_pocket_log = new G4LogicalVolume(weir_hole_tubs, BACCmaterials->LiquidXe(), "weir_pocket");

  G4SubtractionSolid * weir_solid = new G4SubtractionSolid("weir_solid",weir_tubs,weir_hole_tubs,0,G4ThreeVector( 0, 0, 0.5*2.54*cm));
  G4LogicalVolume * weir_log = new G4LogicalVolume(weir_solid, BACCmaterials->Peek(), "weir");

  BaccDetectorComponent * weir = new BaccDetectorComponent( 0,
                                                            G4ThreeVector( 0., 0., weirPos_Z ),
                                                            weir_log,
                                                            "weir",
                                                            liquid_xenon_log,
                                                            0,0,true);

 // Teflon block - actual part
  G4SubtractionSolid * teflon_block_minus_weir_solid = new G4SubtractionSolid("teflon_block_minus_weir",
                                                                              teflon_block_tubs,
                                                                              weir_tubs,
                                                                              0, G4ThreeVector(0.,0.,((5.79-5.65)/2.+1.)*2.54*cm)); 

  G4LogicalVolume * teflon_block_minus_weir_log = new G4LogicalVolume(teflon_block_minus_weir_solid, BACCmaterials->Teflon(),"teflon_block_minus_weir");
  BaccDetectorComponent * teflon_block_minus_weir = new BaccDetectorComponent(0,
                                                                   G4ThreeVector(0.,0.,teflonCentPos_Z),
                                                                   teflon_block_minus_weir_log,
                                                                   "teflon_block_minus_weir",
                                                                   liquid_xenon_log,
                                                                   0,0,true);

 // Gas volume in weir is modeled as upper half of weir.
  G4Tubs * gas_in_weir_tubs = new G4Tubs("gas_xenon_in_weir",
                                         weirPocketInnerRadius,
                                         weirPocketOuterRadius,
                                         weirHalfHeight/2.,
                                         0*deg - weirPocketCutoutAngle/2., weirPocketCutoutAngle);
  G4LogicalVolume * gas_in_weir_log = new G4LogicalVolume( gas_in_weir_tubs, BACCmaterials->GasXe(), "gas_xenon_in_weir");
  BaccDetectorComponent * gas_in_weir = new BaccDetectorComponent(0,
                                                  G4ThreeVector(0.,0.,weirPos_Z + weirHalfHeight/2.),
                                                  gas_in_weir_log,
                                                  "gas_xenon_in_weir",
                                                  liquid_xenon_log,
                                                  0,0,true);
 
 // Gas volume in upper part of detector
 double gas_volume_height = xenon_vol_half_height - (extractionBotPos_Z + fieldGridHalfHeight*2. + 0.5*cm);
 
  G4Tubs * gas_xenon_tubs = new G4Tubs("gas_xenon",
                                   0.*cm,
                                   innerCanInnerRadius,
                                   gas_volume_height/2.,
                                   0.*deg, 360.*deg);
  G4LogicalVolume * gas_xenon_log = new G4LogicalVolume( gas_xenon_tubs, BACCmaterials->GasXe(), "gas_xenon");
  BaccDetectorComponent * gas_xenon = new BaccDetectorComponent(0,
                                               G4ThreeVector(0.,0.,(extractionBotPos_Z + fieldGridHalfHeight*2. + 0.5*cm + gas_volume_height/2.)),
                                               gas_xenon_log,
                                               "gas_xenon",
                                               liquid_xenon_log,
                                               0,0,true);



 // Bottom PMT (vacuum void)
 double bottomPMT_Z = teflonTopPos_Z - bottomPMTHalfHeight - 0.25*2.54*cm;
 G4Tubs * bottom_pmt_tubs = new G4Tubs("bottom_pmt",
                                       0.*cm,
                                       bottomPMTRadius,
                                       bottomPMTHalfHeight,
                                       0.*deg,360.*deg);
 G4LogicalVolume * bottom_pmt_log = new G4LogicalVolume( bottom_pmt_tubs, BACCmaterials->Vacuum(), "bottom_pmt");
 BaccDetectorComponent * bottom_pmt = new BaccDetectorComponent(0,
                                              G4ThreeVector( 0, 0, bottomPMT_Z ),
                                              bottom_pmt_log,
                                              "bottom_pmt",
                                              liquid_xenon_log,
                                              0,0,true); 




}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector XeNeuDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}
