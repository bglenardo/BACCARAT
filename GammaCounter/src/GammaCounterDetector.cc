//////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define GammaCounter geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>
#include <iostream>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
#include "G4Sphere.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
//#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "GammaCounterDetector.hh"
#include "GammaCounterMaterials.hh"
#include "GammaCounterMessenger.hh"
#include "TestShieldMaterials.hh"

//
//		Definitions
//

//using namespace GammaCounterDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
GammaCounterDetector::GammaCounterDetector( G4String detName,
			G4String outVolName )
{

  cerr << "Inside GammaCounterDetector constructor!!" << endl;
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  GammaCountermessenger = new GammaCounterMessenger( this );
  
  //***DO NOT*** create another instance of GammaCounterMaterials anywhere else!
  //Just refer to it using GammaCounterMaterials::GetInstance().
  GammaCountermaterials = GammaCounterMaterials::GetInstance();
  if(!GammaCountermaterials) GammaCountermaterials = new GammaCounterMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
  TestShieldmaterials = TestShieldMaterials::GetInstance();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
GammaCounterDetector::~GammaCounterDetector()
{
  if(GammaCountermessenger) delete GammaCountermessenger;
  if(GammaCountermaterials) delete GammaCountermaterials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void GammaCounterDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void GammaCounterDetector::BuildDetector(){

  cerr << "\nInside BuildDetector of GammaCounterDetector...\n" << endl;

  InitializeDetector();

  //this is how you access your material definition
//  G4cout<<"GammaCounterMaterials example"<<G4endl;
//  G4cout<<GammaCountermaterials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
//  G4cout<<"NistMaterials example"<<G4endl;
//  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
//  G4cout<<"BaccMaterials example"<<G4endl;
//  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * example_box = new G4Box("example_box", 5*m,5*m,5*m);
  logicalVolume  = new G4LogicalVolume(example_box, BACCmaterials->Vacuum(), "example_log");
  logicalVolume->SetVisAttributes( BACCmaterials->VacuumVis() );


  G4Box * lab_space_box = new G4Box("lab_space",4*m,4*m,4*m);
  G4LogicalVolume * lab_space_log = new G4LogicalVolume( lab_space_box, BACCmaterials->Vacuum(), "lab_space");
  lab_space_log->SetVisAttributes( BACCmaterials->VacuumVis() );
  BaccDetectorComponent* lab_space = new BaccDetectorComponent(0,
                                            G4ThreeVector(0,0,0),
                                            lab_space_log,
                                            "lab_space",
                                            logicalVolume,
                                            0,0,true);
                                            

//  G4Sphere * shield_sphere = new G4Sphere( "shield_sphere",
//                                            0. * cm, shieldingRadius,
//                                            0. * deg, 360. * deg,
//                                            0. * deg, 180. * deg);
//  G4LogicalVolume * shield_log = new G4LogicalVolume( shield_sphere, GammaCountermaterials->BoratedPoly20(), "shield_log" );
//  shield_log->SetVisAttributes( BACCmaterials->PolyethyleneBoratedVis() );
//  BaccDetectorComponent* shield = new BaccDetectorComponent( 0,
//                                            G4ThreeVector(0,0,0),
//                                            shield_log,
//                                            "shield",
//                                            lab_space_log,
//                                            0,0,true);
  G4Box * lead_bricks_box = new G4Box("lead_bricks_box",
                                              2.*2.54*cm,
                                              4.*2.54*cm,
                                              2.5*2.54*cm);
  G4LogicalVolume * lead_bricks_log = new G4LogicalVolume( lead_bricks_box, BACCmaterials->Lead(), "lead_bricks");
  lead_bricks_log->SetVisAttributes( BACCmaterials->TeflonVis() );
  BaccDetectorComponent * lead_bricks = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,0),
                                              lead_bricks_log,
                                              "lead_bricks",
                                              lab_space_log,
                                              0,0,true);
 
  G4Tubs * center_hole_tubs = new G4Tubs("center_hole_tubs",
                                              0.*cm, 0.7 * 2.54 * cm,
                                              2.*2.54*cm,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * center_hole_log = new G4LogicalVolume( center_hole_tubs, BACCmaterials->Air(), "center_hole_log" );
  center_hole_log->SetVisAttributes( BACCmaterials->CopperVis() );
  BaccDetectorComponent * center_hole = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,0.5*2.54*cm),
                                              center_hole_log,
                                              "center_hole",
                                              lead_bricks_log,
                                              0,0,true);

 
  G4Tubs * scint_hole_tubs = new G4Tubs("scint_hole_tubs",
                                              0.*cm, 1.1 * 2.54 * cm,
                                              2.*2.54*cm,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * scint_hole_log = new G4LogicalVolume( scint_hole_tubs, BACCmaterials->Air(), "scint_hole_log" );
  scint_hole_log->SetVisAttributes( BACCmaterials->CopperVis() );
  BaccDetectorComponent * scint_hole = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,2.1*2.54*cm,0.5*2.54*cm),
                                              scint_hole_log,
                                              "scint_hole",
                                              lead_bricks_log,
                                              0,0,true);

 
  G4Tubs * scintillator_tubs = new G4Tubs("scintillator_tubs",
                                              0.*cm, 0.75 * 2.54 * cm,
                                              0.75*2.54*cm,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * scintillator_log = new G4LogicalVolume( scintillator_tubs, GammaCountermaterials->SodiumIodide(), "scintillator_log" );
  scintillator_log->SetVisAttributes( BACCmaterials->EJ200Vis() );
  BaccDetectorComponent * scintillator = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,-0.95*2.54*cm),
                                              scintillator_log,
                                              "scintillator",
                                              scint_hole_log,
                                              0,0,true);
  

  G4Box * single_lead_brick_box = new G4Box("single_lead_brick_box",
                                             1.*2.54*cm,
                                             2.*2.54*cm,
                                             4.*2.54*cm);
  G4LogicalVolume * single_lead_brick_log = new G4LogicalVolume( single_lead_brick_box, BACCmaterials->Lead(), "single_lead_brick_log" );
  single_lead_brick_log->SetVisAttributes( BACCmaterials->EJ200Vis() );

  BaccDetectorComponent * single_lead_brick_1 = new BaccDetectorComponent(0,
                                             G4ThreeVector(-3.*2.54*cm,2.*2.54*cm,1.5*2.54*cm),
                                             single_lead_brick_log,
                                             "single_lead_brick_1",
                                             lab_space_log,
                                             0,0,true);
  BaccDetectorComponent * single_lead_brick_2 = new BaccDetectorComponent(0,
                                             G4ThreeVector(-3.*2.54*cm,-2.*2.54*cm,1.5*2.54*cm),
                                             single_lead_brick_log,
                                             "single_lead_brick_2",
                                             lab_space_log,
                                             0,0,true);
  

 G4Box * half_lead_brick_box = new G4Box("half_lead_brick_box",
                                             1.*2.54*cm,
                                             1.*2.54*cm,
                                             4.*2.54*cm);
 G4LogicalVolume * half_lead_brick_log = new G4LogicalVolume( half_lead_brick_box, BACCmaterials->Lead(), "half_lead_brick_log" );
 half_lead_brick_log->SetVisAttributes( BACCmaterials->EJ200Vis() );
 
  BaccDetectorComponent * half_lead_brick_1 = new BaccDetectorComponent(0,
                                             G4ThreeVector(3.*2.54*cm,3.*2.54*cm,1.5*2.54*cm),
                                             half_lead_brick_log,
                                             "half_lead_brick_1",
                                             lab_space_log,
                                             0,0,true);
  BaccDetectorComponent * half_lead_brick_2 = new BaccDetectorComponent(0,
                                             G4ThreeVector(3.*2.54*cm,-3.*2.54*cm,1.5*2.54*cm),
                                             half_lead_brick_log,
                                             "half_lead_brick_2",
                                             lab_space_log,
                                             0,0,true);

 G4Box * bpe_shield_box = new G4Box("bpe_shield_box",
                                             12.*2.54*cm,
                                             12.*2.54*cm,
                                             12.*2.54*cm);
 G4Box * bpe_shield_cavity_box = new G4Box("bpe_shield_cavity_box",
                                             4.*2.54*cm,
                                             4.*2.54*cm,
                                             6.*2.54*cm);
 G4SubtractionSolid * bpe_shield_sub = new G4SubtractionSolid("bpe_shield_sub",bpe_shield_box,bpe_shield_cavity_box);
 
 G4LogicalVolume * bpe_shield_log = new G4LogicalVolume( bpe_shield_sub, TestShieldmaterials->BoratedPE_LD(), "bpe_shield_log");
 BaccDetectorComponent * bpe_shield = new BaccDetectorComponent(0,
                                             G4ThreeVector(0.,0.,(6.-2.5)*2.54*cm),
                                             bpe_shield_log,
                                             "bpe_shield",
                                             lab_space_log,
                                             0,0,true);
 

 G4Box * escape_detector_box = new G4Box("escape_detector_box",
                                             13.*2.54*cm,
                                             13.*2.54*cm,
                                             13.*2.54*cm);
 G4Box * escape_detector_cavity= new G4Box("escape_detector_cavity",
                                             12.5*2.54*cm,
                                             12.5*2.54*cm,
                                             12.5*2.54*cm);
 G4SubtractionSolid * escape_detector_sub = new G4SubtractionSolid("escape_detector_sub",escape_detector_box,escape_detector_cavity);
 G4LogicalVolume * escape_detector_log = new G4LogicalVolume( escape_detector_sub, BACCmaterials->Air(), "escape_detector_log");
 BaccDetectorComponent * escape_detector = new BaccDetectorComponent(0,
                                             G4ThreeVector(0.,0.,(6.-2.5)*2.54*cm),
                                             escape_detector_log,
                                             "escape_detector",
                                             lab_space_log,
                                             0,0,true);
                                  



}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector GammaCounterDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}

