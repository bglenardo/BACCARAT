////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define KTonXe geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
//#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
//#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "KTonXeDetector.hh"
#include "KTonXeMaterials.hh"
#include "KTonXeMessenger.hh"

//
//		Definitions
//

using namespace KTonXeDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
KTonXeDetector::KTonXeDetector( G4String detName,
			G4String outVolName )
{
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  KTonXemessenger = new KTonXeMessenger( this );
  
  //***DO NOT*** create another instance of KTonXeMaterials anywhere else!
  //Just refer to it using KTonXeMaterials::GetInstance().
  KTonXematerials = KTonXeMaterials::GetInstance();
  if(!KTonXematerials) KTonXematerials = new KTonXeMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
KTonXeDetector::~KTonXeDetector()
{
  if(KTonXemessenger) delete KTonXemessenger;
  if(KTonXematerials) delete KTonXematerials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void KTonXeDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void KTonXeDetector::BuildDetector(){
  InitializeDetector();

  //this is how you access your material definition
  G4cout<<"KTonXeMaterials example"<<G4endl;
  G4cout<<KTonXematerials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
  G4cout<<"NistMaterials example"<<G4endl;
  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
  G4cout<<"BaccMaterials example"<<G4endl;
  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * lab_space = new G4Box("lab_space", 30.*m,30.*m,30.*m);
  logicalVolume  = new G4LogicalVolume(lab_space, BACCmaterials->Vacuum(), "lab_space");
  logicalVolume->SetVisAttributes(BACCmaterials->VacuumVis());

  //double radius = 3.7 * m; // Liquid @ 3.1 g/cm3
  double radius = 12.0 * m; // Gas @ 0.09 g/cm3 (~15 bar)
  //double radius = 7.1 * m; // Gas @ 0.42 g/cm3 (~50 bar)

  G4Tubs * shell_tubs = new G4Tubs("detector_shell_tubs",
                                   0, radius + 1.*mm,
                                   radius + 1.*mm,
                                   0.*deg, 360.*deg);
  G4LogicalVolume * shell_log= new G4LogicalVolume(shell_tubs, BACCmaterials->Copper(), "detector_shell_log");
  shell_log->SetVisAttributes( BACCmaterials->CopperVis() );
  BaccDetectorComponent * shell = new BaccDetectorComponent(0,
                                                            G4ThreeVector(0.,0.,0.),
                                                            shell_log,
                                                            "detector_shell",
                                                            logicalVolume,
                                                            0,0,true);

 
  G4Tubs * xe_target_tubs = new G4Tubs("xe_target_tubs",
                                       0., radius,
                                       radius,
                                       0.*deg, 360.*deg);
  G4LogicalVolume * xe_target_log = new G4LogicalVolume(xe_target_tubs, BACCmaterials->GasXe15bar(), "xe_target_log");
  //G4LogicalVolume * xe_target_log = new G4LogicalVolume(xe_target_tubs, BACCmaterials->GasXe50bar(), "xe_target_log");
  //G4LogicalVolume * xe_target_log = new G4LogicalVolume(xe_target_tubs, BACCmaterials->LiquidXe(), "xe_target_log");
  xe_target_log->SetVisAttributes( BACCmaterials->TestBlueVis() );
  BaccDetectorComponent * xe_target = new BaccDetectorComponent(0,
                                                                G4ThreeVector(0.,0.,0.),
                                                                xe_target_log,
                                                                "xe_target",
                                                                shell_log,
                                                                0,0,true);           


//  BaccDetectorComponent * bpe_outer_shield = new BaccDetectorComponent( 0,
//                                           G4ThreeVector(-full_x_half_length+(hdpe_block_length + bpe_shield_thickness)/2.,
//                                                         0,0),
//                                           bpe_outer_shield_log,
//                                           "bpe_outer_shield",
//                                           full_shield_assembly_log,
//                                           0,0,true);
                                     


}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector KTonXeDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}
