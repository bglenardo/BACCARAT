////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define Mossbauer geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
//#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
//#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "MossbauerDetector.hh"
#include "MossbauerMaterials.hh"
#include "MossbauerMessenger.hh"

//
//		Definitions
//

using namespace MossbauerDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
MossbauerDetector::MossbauerDetector( G4String detName,
			G4String outVolName )
{
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  Mossbauermessenger = new MossbauerMessenger( this );
  
  //***DO NOT*** create another instance of MossbauerMaterials anywhere else!
  //Just refer to it using MossbauerMaterials::GetInstance().
  Mossbauermaterials = MossbauerMaterials::GetInstance();
  if(!Mossbauermaterials) Mossbauermaterials = new MossbauerMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
MossbauerDetector::~MossbauerDetector()
{
  if(Mossbauermessenger) delete Mossbauermessenger;
  if(Mossbauermaterials) delete Mossbauermaterials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void MossbauerDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void MossbauerDetector::BuildDetector(){
  InitializeDetector();

//  //this is how you access your material definition
//  G4cout<<"MossbauerMaterials example"<<G4endl;
//  G4cout<<Mossbauermaterials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
// 
//  //Alternatively you can use the nist material database
//  G4cout<<"NistMaterials example"<<G4endl;
//  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
//  
//  //another way is to use BaccMaterials
//  G4cout<<"BaccMaterials example"<<G4endl;
//  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * example_box = new G4Box("example_box", 10*m,10*m,10*m);
  logicalVolume  = new G4LogicalVolume(example_box, BACCmaterials->Vacuum(), "lab_space_log");
  logicalVolume->SetVisAttributes( BACCmaterials->VacuumVis() );

  double detector_offset = 2. * 2.54 * cm;
  double scintillator_diameter = 1. * 2.54 * cm;
  double scintillator_thickness = 0.04 * 2.54 * cm;
  double be_window_thickness = 0.005 * 2.54 * cm;
  double quartz_window_thickness = 0.062 * 2.54 * cm;



  G4Tubs * scintillator_tubs = new G4Tubs("scintillator_tubs",
                                              0.*cm, scintillator_diameter/2.,
                                              scintillator_thickness/2.,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * scintillator_log = new G4LogicalVolume( scintillator_tubs, 
                                                            BACCmaterials->SodiumIodide(), 
                                                            "scintillator_log" );
  scintillator_log->SetVisAttributes( BACCmaterials->TestGreenVis() );
  BaccDetectorComponent * scintillator = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,detector_offset),
                                              scintillator_log,
                                              "scintillator",
                                              logicalVolume,
                                              0,0,true);

  double be_window_offset = detector_offset - scintillator_thickness/2. - be_window_thickness/2.;
  G4Tubs* be_window_tubs = new G4Tubs("be_window_tubs",
                                              0.*cm, scintillator_diameter/2.,
                                              be_window_thickness/2.,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * be_window_log = new G4LogicalVolume( be_window_tubs, BACCmaterials->Beryllium(), "be_window_log");
  be_window_log->SetVisAttributes( BACCmaterials->GoldVis() );
  BaccDetectorComponent * be_window = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,be_window_offset),
                                              be_window_log,
                                              "be_window",
                                              logicalVolume,
                                              0,0,true);

  double quartz_window_offset = detector_offset + scintillator_thickness/2. + quartz_window_thickness/2.;
  G4Tubs* quartz_window_tubs = new G4Tubs("quartz_window_tubs",
                                              0.*cm, scintillator_diameter/2.,
                                              quartz_window_thickness/2.,
                                              0.*deg, 360.*deg);
  G4LogicalVolume * quartz_window_log = new G4LogicalVolume( quartz_window_tubs, BACCmaterials->Beryllium(), "quartz_window_log");
  quartz_window_log->SetVisAttributes( BACCmaterials->TestBlueVis() );
  BaccDetectorComponent * quartz_window = new BaccDetectorComponent(0,
                                              G4ThreeVector(0,0,quartz_window_offset),
                                              quartz_window_log,
                                              "quartz_window",
                                              logicalVolume,
                                              0,0,true);
  
  
  double al_casing_ID = scintillator_diameter;
  double al_casing_OD = 1.25 * 2.54 * cm;
  double al_casing_thickness = 0.199 * 2.54 * cm;
  double al_casing_offset = detector_offset;
  G4Tubs * al_casing_tubs = new G4Tubs("al_casing_tubs",
                                        al_casing_ID/2., al_casing_OD/2.,
                                        al_casing_thickness/2.,
                                        0.*deg, 360.*deg);
  G4LogicalVolume * al_casing_log = new G4LogicalVolume( al_casing_tubs, BACCmaterials->Aluminum(), "al_casing_log");
  BaccDetectorComponent * al_casing = new BaccDetectorComponent(0,
                                        G4ThreeVector(0,0,al_casing_offset),
                                        al_casing_log,
                                        "al_casing",
                                        logicalVolume,
                                        0,0,true);


 




  

}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector MossbauerDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}
