////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define XeNeu materials
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//	GEANT4 includes
//
#include "G4Isotope.hh"
#include "G4Element.hh"
#include "G4Material.hh"
#include "G4OpticalSurface.hh"
#include "G4VisAttributes.hh"
#include "G4Color.hh"
#include "G4SystemOfUnits.hh"

//
//	Project-specific includes
//
#include "XeNeuDTMaterials.hh"

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					XeNeuDTMaterials()
//------++++++------++++++------++++++------++++++------++++++------++++++------
XeNeuDTMaterials *XeNeuDTMaterials::XeNeumaterials = 0;
XeNeuDTMaterials::XeNeuDTMaterials()
{
  if(XeNeumaterials){
    G4cerr<<"XeNeuDTMaterials is a singleton:: an instance already exists!"<<G4endl;
    //    delete XeNeumaterials;
    exit(1);
  }  
  CreateMaterials();
  CreateOpticalSurfaces();
  CreateVisualAttributes();
  
  XeNeumaterials = this;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					~XeNeuDTMaterials()
//------++++++------++++++------++++++------++++++------++++++------++++++------
XeNeuDTMaterials::~XeNeuDTMaterials()
{

  //delete all materials
  if(materials.size()>0){
    for (material_map::iterator it=materials.begin(); it!=materials.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size

  //delete all material properties
  //   if(properties.size()>0){
  //     for (property_map::iterator it=properties.begin(); it!=properties.end(); it++){
  //       if(it->second){
  // 	delete it->second;
  // 	it->second = NULL;
  //       }//end if second
  //     }//end for
  //   }//end if size

  //delete all visattributes
  if(visattributes.size()>0){
    for (vis_map::iterator it=visattributes.begin(); it!=visattributes.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size

  //delete all opticals
  if(opticals.size()>0){
    for (optical_map::iterator it=opticals.begin(); it!=opticals.end(); it++){
      if(it->second){
	delete it->second;
	it->second = NULL;
      }//end if second
    }//end for
  }//end if size
  
  XeNeumaterials = 0;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					GetInstance()
//------++++++------++++++------++++++------++++++------++++++------++++++------
XeNeuDTMaterials *XeNeuDTMaterials::GetInstance()
{
  return XeNeumaterials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetMaterialByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4Material *XeNeuDTMaterials::GetMaterialByName(G4String mat_name)
{
  for (material_map::iterator it=materials.begin(); it!=materials.end(); it++){
    if(it->first == mat_name) return it->second;
  }//end for
  return NULL;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetVisAttributesByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4VisAttributes *XeNeuDTMaterials::GetVisAttributesByName(G4String mat_name)
{
  for (vis_map::iterator it=visattributes.begin(); it!=visattributes.end(); it++){
    if(it->first == mat_name) return it->second;
  }//end for
  return NULL;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetPropertiesTableByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
// G4MaterialPropertiesTable *XeNeuDTMaterials::GetPropertiesTableByName(G4String mat_name)
// {
//   for (property_map::iterator it=properties.begin(); it!=properties.end(); it++){
//     if(it->first == mat_name) return it->second;
//   }//end for
//   return NULL;
// }

//------++++++------++++++------++++++------++++++------++++++------++++++------
//				   GetOpticalSurfaceByName()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4OpticalSurface *XeNeuDTMaterials::GetOpticalSurfaceByName(G4String optical_name)
{
  for (optical_map::iterator it=opticals.begin(); it!=opticals.end(); it++){
    if(it->first == optical_name) return it->second;
  }//end for
  return NULL;
}


void XeNeuDTMaterials::CreateMaterials()
{
  //
  //	Isotopes
  //	Atomic weights come from webelements.com
  //
  
  G4Isotope *Xe124 = new G4Isotope( "Xe124", 54, 124, 123.9058942 *g/mole );
  G4Isotope *Xe126 = new G4Isotope( "Xe126", 54, 126, 125.904281 *g/mole );
  G4Isotope *Xe128 = new G4Isotope( "Xe128", 54, 128, 127.9035312 *g/mole );
  G4Isotope *Xe129 = new G4Isotope( "Xe129", 54, 129, 128.9047801 *g/mole );
  G4Isotope *Xe130 = new G4Isotope( "Xe130", 54, 130, 129.9035094 *g/mole );
  G4Isotope *Xe131 = new G4Isotope( "Xe131", 54, 131, 130.905072 *g/mole );
  G4Isotope *Xe132 = new G4Isotope( "Xe132", 54, 132, 131.904144 *g/mole );
  G4Isotope *Xe134 = new G4Isotope( "Xe134", 54, 134, 133.905395 *g/mole );
  G4Isotope *Xe136 = new G4Isotope( "Xe136", 54, 136, 135.907214 *g/mole );

  G4Isotope *B10 = new G4Isotope("B10", 5, 10, 10.*g/mole );
  G4Isotope *B11 = new G4Isotope("B11", 5, 11, 11.*g/mole );

  G4Isotope *O16 = new G4Isotope("O16", 8, 16, 16.*g/mole );
  G4Isotope *O18 = new G4Isotope("O18",8, 18, 18.*g/mole );
  G4Isotope *O17 = new G4Isotope("O17",8,17,17.*g/mole );

  G4Isotope *Na23 = new G4Isotope("Na23", 11, 23, 23.*g/mole );

  G4Isotope *H1 = new G4Isotope( "H1", 1, 1, 1.008*g/mole );
  
  G4Isotope *Al14 = new G4Isotope( "Al14", 13, 27, 27. *g/mole );

  G4Isotope *Si14 = new G4Isotope( "Si14", 14, 28, 28. *g/mole );
  G4Isotope *Si15 = new G4Isotope( "Si15", 14, 29, 29. *g/mole );
  G4Isotope *Si16 = new G4Isotope( "Si16", 14, 30, 30. *g/mole );
  
  G4Isotope *K39 = new G4Isotope( "K39", 19, 39, 39*g/mole);
  G4Isotope *K41 = new G4Isotope( "K41", 19, 41, 41*g/mole);

  G4Isotope *Ca40 = new G4Isotope( "Ca40", 20, 40, 40*g/mole);
  G4Isotope *Ca44 = new G4Isotope( "Ca44", 20, 44, 44*g/mole);

  G4Isotope *Fe54 = new G4Isotope( "Fe54", 26, 54, 54*g/mole);
  G4Isotope *Fe56 = new G4Isotope( "Fe56", 26, 56, 56*g/mole);
  G4Isotope *Fe57 = new G4Isotope( "Fe57", 26, 57, 57*g/mole);

 
  G4Isotope *C12 = new G4Isotope( "C12", 6, 12, 12.*g/mole );
  G4Isotope *C13 = new G4Isotope( "C13", 6, 13, 13.*g/mole );

  //
  //	Elements
  //
	
  G4Element *natXe = new G4Element( "Natural Xe", "natXe", 9 );
  natXe->AddIsotope( Xe124, 0.09*perCent );
  natXe->AddIsotope( Xe126, 0.09*perCent );
  natXe->AddIsotope( Xe128, 1.92*perCent );
  natXe->AddIsotope( Xe129, 26.44*perCent );
  natXe->AddIsotope( Xe130, 4.08*perCent );
  natXe->AddIsotope( Xe131, 21.18*perCent );
  natXe->AddIsotope( Xe132, 26.89*perCent );
  natXe->AddIsotope( Xe134, 10.44*perCent );
  natXe->AddIsotope( Xe136, 8.87*perCent );

  G4Element *natH = new G4Element("Natural Hydrogen","natH",1);
  natH->AddIsotope( H1, 100.*perCent);

  G4Element * natNa = new G4Element("Natural Sodium", "natNa",1);
  natNa->AddIsotope( Na23, 100.*perCent );

  G4Element * natB = new G4Element("Natural Boron", "natB", 2);
  natB->AddIsotope( B10, 20.*perCent);
  natB->AddIsotope( B11, 80.*perCent);

  G4Element * natO = new G4Element("Natural Oxygen", "natO", 3);
  natO->AddIsotope( O16, 99.76 * perCent);
  natO->AddIsotope( O17, 0.04 * perCent);
  natO->AddIsotope( O18, 0.2 * perCent);

  G4Element * natC = new G4Element("Natural Carbon", "natC", 2);
  natC->AddIsotope( C12, 98.9 * perCent);
  natC->AddIsotope( C13, 1.1 * perCent);

  G4Element * natSi = new G4Element("Natural Silicon", "natSi", 3);
  natSi->AddIsotope( Si14, 92 * perCent);
  natSi->AddIsotope( Si15, 5 * perCent);
  natSi->AddIsotope( Si16, 3 * perCent);

  G4Element * natK = new G4Element("Natural Potassium", "natK", 2);
  natK->AddIsotope( K39, 93*perCent);
  natK->AddIsotope( K41, 7*perCent);

  G4Element * natCa = new G4Element("Natural Calcium", "natCa", 2);
  natCa->AddIsotope( Ca40, 97*perCent);
  natCa->AddIsotope( Ca44, 3 * perCent);

  G4Element * natFe = new G4Element("Natural Iron", "natFe", 3);
  natFe->AddIsotope( Fe54, 6 * perCent);
  natFe->AddIsotope( Fe56, 92 * perCent);
  natFe->AddIsotope( Fe57, 2* perCent);
 
  G4Element * natAl = new G4Element("Natural Aluminum", "natAl", 1);
  natAl->AddIsotope( Al14, 100* perCent);

  //	Materials
  //
  G4Material * mat_ = NULL;
  
  G4Material * liquidXe = new G4Material( "liquidXe", 2.888*g/cm3, 1, kStateLiquid,
					  173*kelvin, 1.57*bar );
  liquidXe->AddElement( natXe, 1 );
  mat_ = GetMaterialByName("liquidXe");
  if(mat_) delete mat_;
  materials ["liquidXe"] = liquidXe;


  //Create Borated Water Material. There is 3000 kg of water and 90 kg of borax. 
  //3% of the material should be borax. Normalize the material to account for such percentage.
  //For every 1 kg of borax there is 33.33 kg of H20. Round to 30 kg. 
  //moles of borax(447.3)/moles of water(166528) = 0.002686 
  //for every 1 borax compound there are 372.3 H20.  
  //G4Material (const G4String &name, G4double density, G4int nComponents, G4State state=kStateUndefined, G4double temp=CLHEP::STP_Temperature, G4double pressure=CLHEP::STP_Pressure)
  //
  
  G4int natoms;


  boratedWater = new G4Material("boratedWater",1.021*g/cm3,4,kStateLiquid,
                                  295.*kelvin,1.*bar);
  boratedWater->AddElement( natNa,natoms = 2*2 );
  boratedWater->AddElement( natB, natoms = 4*2 );
  boratedWater->AddElement( natO, natoms = 17*2 + 372 );
  boratedWater->AddElement( natH, natoms = 20*2 + 372*2 );

  mat_ = GetMaterialByName("boratedWater");
  if(mat_) delete mat_;
  materials["boratedWater"] = boratedWater;
   
//Create borax 
//

  borax = new G4Material("borax",2.4*g/cm3,4,kStateSolid,
                                  295.*kelvin,1.*bar);
  borax->AddElement( natNa,natoms = 2 );
  borax->AddElement( natB, natoms = 4 );
  borax->AddElement( natO, natoms = 17 );
  borax->AddElement( natH, natoms = 20 );

  mat_ = GetMaterialByName("borax");
  if(mat_) delete mat_;
  materials["borax"] = borax;


//Create Polyethylene of varied % of Boron 
//

  G4double fractionmass;

  bpe5 = new G4Material("bpe5",1.07*g/cm3,3,kStateSolid,
                                  295.*kelvin,1.*bar);
  bpe5->AddElement( natC, fractionmass = 81.5 * perCent);
  bpe5->AddElement( natH, fractionmass = 13.5 * perCent);
  bpe5->AddElement( natB, fractionmass = 5 * perCent);

  mat_ = GetMaterialByName("bpe5");
  if(mat_) delete mat_;
  materials["bpe5"] = bpe5;

  bpe10 = new G4Material("bpe10",1.0*g/cm3,3,kStateSolid,
                                  295.*kelvin,1.*bar);
  bpe10->AddElement( natC, fractionmass = 77  * perCent);
  bpe10->AddElement( natH, fractionmass = 13 * perCent);
  bpe10->AddElement( natB, fractionmass = 10 * perCent);

  mat_ = GetMaterialByName("bpe10");
  if(mat_) delete mat_;
  materials["bpe10"] = bpe10;

  bpe15 = new G4Material("bpe15",1.05*g/cm3,3,kStateSolid,
                                  295.*kelvin,1.*bar);
  bpe15->AddElement( natC, fractionmass = 73 * perCent);
  bpe15->AddElement( natH, fractionmass = 12 * perCent);
  bpe15->AddElement( natB, fractionmass = 15 * perCent);

  mat_ = GetMaterialByName("bpe15");
  if(mat_) delete mat_;
  materials["bpe15"] = bpe15;

  bpe20 = new G4Material("bpe20",1.10*g/cm3,3,kStateSolid,
                                  295.*kelvin,1.*bar);
  bpe20->AddElement( natC, fractionmass = 68.5 * perCent);
  bpe20->AddElement( natH, fractionmass = 11.5 * perCent);
  bpe20->AddElement( natB, fractionmass = 20 * perCent);

  mat_ = GetMaterialByName("bpe20");
  if(mat_) delete mat_;
  materials["bpe20"] = bpe20;

  bpe30 = new G4Material("bpe30",1.19*g/cm3,3,kStateSolid,
                                  295.*kelvin,1.*bar);
  bpe30->AddElement( natC, fractionmass = 61.3 * perCent);
  bpe30->AddElement( natH, fractionmass = 8.7 * perCent);
  bpe30->AddElement( natB, fractionmass = 30 * perCent);

  mat_ = GetMaterialByName("bpe30");
  if(mat_) delete mat_;
  materials["bpe30"] = bpe30;

//Create Concrete,PORTLAND

  concrete = new G4Material("concrete",2.3*g/cm3,8,kStateSolid,
                                  295.*kelvin,1.*bar);
  concrete->AddElement( natH, 1 * perCent );
  concrete->AddElement( natO, 53 * perCent );
  concrete->AddElement( natNa, 1.5 * perCent );
  concrete->AddElement( natAl, 3.5 * perCent );
  concrete->AddElement( natSi, 34 * perCent);
  concrete->AddElement( natK, 1.5 * perCent);
  concrete->AddElement( natCa, 4.25 * perCent);
  concrete->AddElement( natFe, 1.25 * perCent);

  mat_ = GetMaterialByName("concrete");
  if(mat_) delete mat_;
  materials["concrete"] = concrete;


}


//------++++++------++++++------++++++------++++++------++++++------++++++------
//					CreateOpticalSurfaces()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void XeNeuDTMaterials::CreateOpticalSurfaces()
{
	
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//					CreateVisualAttributes()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void XeNeuDTMaterials::CreateVisualAttributes()
{

  G4VisAttributes * vis_ = NULL;
  G4VisAttributes * liquidXeVis = new G4VisAttributes();
  
 liquidXeVis->SetColor( 0.0, 0.0, 1.0, 0.4 );
  liquidXeVis->SetVisibility( true );
  vis_ = GetVisAttributesByName("liquidXe");
  if(vis_) delete vis_;
  visattributes ["liquidXe"] = liquidXeVis;
 
 boratedWaterVis = new G4VisAttributes();
  boratedWaterVis->SetColor(1.,0.,0.,0.1);
  boratedWaterVis->SetVisibility( true );

  vis_ = GetVisAttributesByName("boratedWater");
  if(vis_) delete vis_;
  visattributes["boratedWater"] = boratedWaterVis;

 boraxVis = new G4VisAttributes();
  boraxVis->SetColor(0.,0.,1.,0.1);
  boraxVis->SetVisibility( true );

  vis_ = GetVisAttributesByName("borax");
  if(vis_) delete vis_;
  visattributes["borax"] = boraxVis;

 bpe5Vis = new G4VisAttributes();
  bpe5Vis->SetColor(0.,1.,0.,0.1);
  bpe5Vis->SetVisibility( true );

  vis_ = GetVisAttributesByName("bpe5");
  if(vis_) delete vis_;
  visattributes["bpe5"] = bpe5Vis;

 bpe10Vis = new G4VisAttributes();
  bpe10Vis->SetColor(0.,0.,1.,0.1);
  bpe10Vis->SetVisibility( true );

  vis_ = GetVisAttributesByName("bpe10");
  if(vis_) delete vis_;
  visattributes["bpe10"] = bpe10Vis;

 bpe15Vis = new G4VisAttributes();
  bpe15Vis->SetColor(0.,0.,1.,0.1);
  bpe15Vis->SetVisibility( true );

  vis_ = GetVisAttributesByName("bpe15");
  if(vis_) delete vis_;
  visattributes["bpe15"] = bpe15Vis;

 bpe20Vis = new G4VisAttributes();
  bpe20Vis->SetColor(0.,0.,1.,0.1);
  bpe20Vis->SetVisibility( true );

  vis_ = GetVisAttributesByName("bpe20");
  if(vis_) delete vis_;
  visattributes["bpe20"] = bpe20Vis;

 bpe30Vis = new G4VisAttributes();
  bpe30Vis->SetColor(0.,0.,1.,0.1);
  bpe30Vis->SetVisibility( true );

  vis_ = GetVisAttributesByName("bpe30");
  if(vis_) delete vis_;
  visattributes["bpe30"] = bpe30Vis;
 
  concreteVis = new G4VisAttributes();
  concreteVis->SetColor(128.,128.,128.,0.1);
  concreteVis->SetVisibility( true );

  vis_ = GetVisAttributesByName("concrete");
  if(vis_) delete vis_;
  visattributes["concrete"] = concreteVis;


}

