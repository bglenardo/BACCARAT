////////////////////////////////////////////////////////////////////////////////
//
// This code is automatically generated by BACCARAT to define AmBeXe137Source geometry
//
////////////////////////////////////////////////////////////////////////////////
//
//      Change log
// 17 March 2016 - Initial Template submission (Jingke)
//
////////////////////////////////////////////////////////////////////////////////

//
//      C/C++ includes
//
#include <sstream>
#include <ctime>

//
//      GEANT4 includes
//
#include "G4SystemOfUnits.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
//#include "G4RotationMatrix.hh"
#include "G4Tubs.hh"
#include "G4Box.hh"
//#include "G4Torus.hh"
//#include "G4CutTubs.hh"
//#include "G4Ellipsoid.hh"
//#include "G4Polyhedra.hh"
//#include "G4Cons.hh"
//#include "G4SubtractionSolid.hh"
//#include "G4UnionSolid.hh"
//#include "G4IntersectionSolid.hh"
//#include "G4OpticalSurface.hh"
//#include "G4LogicalBorderSurface.hh"

//
//      BACCARAT includes
//
#include "BaccManager.hh"
#include "BaccDetectorComponent.hh"
#include "BaccMaterials.hh"
#include "BaccSource.hh"
#include "BaccPhysicsOpticalPhysics.hh"

//
//      Project includes
//
#include "AmBeXe137SourceDetector.hh"
#include "AmBeXe137SourceMaterials.hh"
#include "AmBeXe137SourceMessenger.hh"

//
//		Definitions
//

using namespace AmBeXe137SourceDetectorParameters;
using namespace std;


//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Constructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe137SourceDetector::AmBeXe137SourceDetector( G4String detName,
			G4String outVolName )
{
  detectorName = detName;
  outermostVolumeName = outVolName;
  
  AmBeXe137Sourcemessenger = new AmBeXe137SourceMessenger( this );
  
  //***DO NOT*** create another instance of AmBeXe137SourceMaterials anywhere else!
  //Just refer to it using AmBeXe137SourceMaterials::GetInstance().
  AmBeXe137Sourcematerials = AmBeXe137SourceMaterials::GetInstance();
  if(!AmBeXe137Sourcematerials) AmBeXe137Sourcematerials = new AmBeXe137SourceMaterials();
  //get the Bacc Materials and Nist materials
  NISTmaterials = G4NistManager::Instance();
  BACCmaterials = BaccMaterials::GetMaterials();
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                          Detector Destructor
//------++++++------++++++------++++++------++++++------++++++------++++++------
AmBeXe137SourceDetector::~AmBeXe137SourceDetector()
{
  if(AmBeXe137Sourcemessenger) delete AmBeXe137Sourcemessenger;
  if(AmBeXe137Sourcematerials) delete AmBeXe137Sourcematerials;
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              InitializeDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe137SourceDetector::InitializeDetector(){
  
  //if you need to access BaccManager
  BaccManager *BACCmanager = BaccManager::GetManager();
  
  //you can add the detector-specific source catalog here
  
}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                              BuildDetector()
//------++++++------++++++------++++++------++++++------++++++------++++++------
void AmBeXe137SourceDetector::BuildDetector(){
  InitializeDetector();

  //this is how you access your material definition
  G4cout<<"AmBeXe137SourceMaterials example"<<G4endl;
  G4cout<<AmBeXe137Sourcematerials->GetMaterialByName("liquidXe")<<G4endl<<G4endl;
 
  //Alternatively you can use the nist material database
  G4cout<<"NistMaterials example"<<G4endl;
  G4cout<< NISTmaterials->FindOrBuildMaterial("G4_lXe")<<G4endl<<G4endl;
  
  //another way is to use BaccMaterials
  G4cout<<"BaccMaterials example"<<G4endl;
  G4cout<<BACCmaterials->LiquidXe()<<G4endl<<G4endl;
 
  //  Remember that the outermost vessel is defined as a LUXSimDetector
  //	"logicalVolume".
  
  //build your detector here    
  
  //example box -- make it into a minimal working example
  G4Box * lab_space = new G4Box("lab_space", 4.*m,4.*m,4.*m);
  logicalVolume  = new G4LogicalVolume(lab_space, BACCmaterials->Air(), "lab_space_log");
  logicalVolume->SetVisAttributes( BACCmaterials->AirVis() );

  G4Tubs * water_tank_tubs = new G4Tubs("water_tank_tubs",
                                   0.*cm,
                                   24.*2.54*cm,
                                   20.*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * water_tank_log = new G4LogicalVolume( water_tank_tubs, BACCmaterials->Water(), "water_tank_log");
  water_tank_log->SetVisAttributes( BACCmaterials->WaterVis() );
  BaccDetectorComponent * water_tank = new BaccDetectorComponent(0, 
                                   G4ThreeVector(0,0,0),
                                   water_tank_log,
                                   "water_tank",
                                   logicalVolume,
                                   0,0,true);

  
  G4Tubs * steel_cylinder_tubs = new G4Tubs("steel_cylinder_tubs",
                                   0.*cm,
                                   (13.88/2. + 0.065)*2.54*cm,
                                   8.5*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * steel_cylinder_log = new G4LogicalVolume( steel_cylinder_tubs, BACCmaterials->Steel(), "steel_cylinder_log");
  steel_cylinder_log->SetVisAttributes( BACCmaterials->SteelVis() );
  BaccDetectorComponent * steel_cylinder = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,0),
                                   steel_cylinder_log,
                                   "steel_cylinder",
                                   water_tank_log,
                                   0,0,true);
  
  G4Tubs * xe_gas_tubs = new G4Tubs("xe_gas_tubs",
                                   0.*cm,
                                   13.88/2.*2.54*cm,
                                   8.5*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * xe_gas_log = new G4LogicalVolume( xe_gas_tubs, AmBeXe137Sourcematerials->GasEnrichedXe(), "xe_gas_log");
  xe_gas_log->SetVisAttributes( BACCmaterials->TestGreenVis() );
  BaccDetectorComponent * xe_gas = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,0),
                                   xe_gas_log,
                                   "xe_gas",
                                   steel_cylinder_log,
                                   0,0,true);
  
  G4Tubs * steel_inner_can_tubs = new G4Tubs("steel_inner_can_tubs",
                                   0.*cm,
                                   4.*2.54*cm,
                                   5.5*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * steel_inner_can_log = new G4LogicalVolume( steel_inner_can_tubs, BACCmaterials->Steel(), "steel_inner_can");
  steel_inner_can_log->SetVisAttributes( BACCmaterials->SteelVis() );
  BaccDetectorComponent * steel_inner_can = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,(8.5-5.5)*2.54*cm),
                                   steel_inner_can_log,
                                   "steel_inner_can",
                                   xe_gas_log,
                                   0,0,true);                                 

  
  G4Tubs * moderator_tubs = new G4Tubs("moderator_tubs",
                                   0.*cm,
                                   (4.-0.065)*2.54*cm,
                                   (5.5-0.065)*2.54*cm,
                                   0.*deg,
                                   360.*deg);
  G4LogicalVolume * moderator_log = new G4LogicalVolume( moderator_tubs, BACCmaterials->Water(), "moderator_log");
  moderator_log->SetVisAttributes( BACCmaterials->WaterVis() );
  BaccDetectorComponent * moderator = new BaccDetectorComponent(0,
                                   G4ThreeVector(0,0,0),
                                   moderator_log,
                                   "moderator",
                                   steel_inner_can_log,
                                   0,0,true);


}

//------++++++------++++++------++++++------++++++------++++++------++++++------
//                                      SetOrigin()
//------++++++------++++++------++++++------++++++------++++++------++++++------
G4ThreeVector AmBeXe137SourceDetector::SetOrigin(BaccDetectorComponent *ExpHall){
  //you need to implement this function here
  return G4ThreeVector(0,0,0);
}
